# coding: utf-8

"""
    Car Rental Api

    Rest api for car rental  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: mabtuhanilhan@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MakeReservationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'car': 'int',
        'start_datetime': 'date',
        'end_datetime': 'date',
        'user': 'int'
    }

    attribute_map = {
        'car': 'car',
        'start_datetime': 'start_datetime',
        'end_datetime': 'end_datetime',
        'user': 'user'
    }

    def __init__(self, car=None, start_datetime=None, end_datetime=None, user=None, _configuration=None):  # noqa: E501
        """MakeReservationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._car = None
        self._start_datetime = None
        self._end_datetime = None
        self._user = None
        self.discriminator = None

        self.car = car
        self.start_datetime = start_datetime
        self.end_datetime = end_datetime
        self.user = user

    @property
    def car(self):
        """Gets the car of this MakeReservationRequest.  # noqa: E501

        id of the car  # noqa: E501

        :return: The car of this MakeReservationRequest.  # noqa: E501
        :rtype: int
        """
        return self._car

    @car.setter
    def car(self, car):
        """Sets the car of this MakeReservationRequest.

        id of the car  # noqa: E501

        :param car: The car of this MakeReservationRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and car is None:
            raise ValueError("Invalid value for `car`, must not be `None`")  # noqa: E501

        self._car = car

    @property
    def start_datetime(self):
        """Gets the start_datetime of this MakeReservationRequest.  # noqa: E501


        :return: The start_datetime of this MakeReservationRequest.  # noqa: E501
        :rtype: date
        """
        return self._start_datetime

    @start_datetime.setter
    def start_datetime(self, start_datetime):
        """Sets the start_datetime of this MakeReservationRequest.


        :param start_datetime: The start_datetime of this MakeReservationRequest.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and start_datetime is None:
            raise ValueError("Invalid value for `start_datetime`, must not be `None`")  # noqa: E501

        self._start_datetime = start_datetime

    @property
    def end_datetime(self):
        """Gets the end_datetime of this MakeReservationRequest.  # noqa: E501


        :return: The end_datetime of this MakeReservationRequest.  # noqa: E501
        :rtype: date
        """
        return self._end_datetime

    @end_datetime.setter
    def end_datetime(self, end_datetime):
        """Sets the end_datetime of this MakeReservationRequest.


        :param end_datetime: The end_datetime of this MakeReservationRequest.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and end_datetime is None:
            raise ValueError("Invalid value for `end_datetime`, must not be `None`")  # noqa: E501

        self._end_datetime = end_datetime

    @property
    def user(self):
        """Gets the user of this MakeReservationRequest.  # noqa: E501

        id of the user  # noqa: E501

        :return: The user of this MakeReservationRequest.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MakeReservationRequest.

        id of the user  # noqa: E501

        :param user: The user of this MakeReservationRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MakeReservationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MakeReservationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MakeReservationRequest):
            return True

        return self.to_dict() != other.to_dict()
