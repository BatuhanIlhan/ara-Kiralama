# coding: utf-8

"""
    Car Rental Api

    Rest api for car rental  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: mabtuhanilhan@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AvailabilityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def availability_get(self, pickup_date, dropoff_date, office_id, **kwargs):  # noqa: E501
        """Cars available according to the given pick up and drop off date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.availability_get(pickup_date, dropoff_date, office_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date pickup_date: date user want to pick-up the car. It should be written in that format \"yyyy-mm-dd\" (required)
        :param date dropoff_date: date user want to drop-off the car. It should be written in that format \"yyyy-mm-dd\" (required)
        :param int office_id: (required)
        :return: CarList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.availability_get_with_http_info(pickup_date, dropoff_date, office_id, **kwargs)  # noqa: E501
        else:
            (data) = self.availability_get_with_http_info(pickup_date, dropoff_date, office_id, **kwargs)  # noqa: E501
            return data

    def availability_get_with_http_info(self, pickup_date, dropoff_date, office_id, **kwargs):  # noqa: E501
        """Cars available according to the given pick up and drop off date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.availability_get_with_http_info(pickup_date, dropoff_date, office_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date pickup_date: date user want to pick-up the car. It should be written in that format \"yyyy-mm-dd\" (required)
        :param date dropoff_date: date user want to drop-off the car. It should be written in that format \"yyyy-mm-dd\" (required)
        :param int office_id: (required)
        :return: CarList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pickup_date', 'dropoff_date', 'office_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method availability_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pickup_date' is set
        if self.api_client.client_side_validation and ('pickup_date' not in params or
                                                       params['pickup_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `pickup_date` when calling `availability_get`")  # noqa: E501
        # verify the required parameter 'dropoff_date' is set
        if self.api_client.client_side_validation and ('dropoff_date' not in params or
                                                       params['dropoff_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `dropoff_date` when calling `availability_get`")  # noqa: E501
        # verify the required parameter 'office_id' is set
        if self.api_client.client_side_validation and ('office_id' not in params or
                                                       params['office_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `office_id` when calling `availability_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pickup_date' in params:
            query_params.append(('pickupDate', params['pickup_date']))  # noqa: E501
        if 'dropoff_date' in params:
            query_params.append(('dropoffDate', params['dropoff_date']))  # noqa: E501
        if 'office_id' in params:
            query_params.append(('officeId', params['office_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/availability/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CarList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
